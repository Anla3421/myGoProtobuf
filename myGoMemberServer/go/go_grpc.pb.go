// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.9.1
// source: mygrpc/go.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MygrpcServiceClient is the client API for MygrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MygrpcServiceClient interface {
	QueryLogIsExist(ctx context.Context, in *QueryLogIsExistRequest, opts ...grpc.CallOption) (*QueryLogIsExistResponse, error)
	QueryLog(ctx context.Context, in *QueryLogRequest, opts ...grpc.CallOption) (*QueryLogResponse, error)
	DeleteLogIsExist(ctx context.Context, in *DeleteLogIsExistRequest, opts ...grpc.CallOption) (*DeleteLogIsExistResponse, error)
	DeleteLog(ctx context.Context, in *DeleteLogRequest, opts ...grpc.CallOption) (*DeleteLogResponse, error)
}

type mygrpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMygrpcServiceClient(cc grpc.ClientConnInterface) MygrpcServiceClient {
	return &mygrpcServiceClient{cc}
}

func (c *mygrpcServiceClient) QueryLogIsExist(ctx context.Context, in *QueryLogIsExistRequest, opts ...grpc.CallOption) (*QueryLogIsExistResponse, error) {
	out := new(QueryLogIsExistResponse)
	err := c.cc.Invoke(ctx, "/protobuf.MygrpcService/QueryLogIsExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mygrpcServiceClient) QueryLog(ctx context.Context, in *QueryLogRequest, opts ...grpc.CallOption) (*QueryLogResponse, error) {
	out := new(QueryLogResponse)
	err := c.cc.Invoke(ctx, "/protobuf.MygrpcService/QueryLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mygrpcServiceClient) DeleteLogIsExist(ctx context.Context, in *DeleteLogIsExistRequest, opts ...grpc.CallOption) (*DeleteLogIsExistResponse, error) {
	out := new(DeleteLogIsExistResponse)
	err := c.cc.Invoke(ctx, "/protobuf.MygrpcService/DeleteLogIsExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mygrpcServiceClient) DeleteLog(ctx context.Context, in *DeleteLogRequest, opts ...grpc.CallOption) (*DeleteLogResponse, error) {
	out := new(DeleteLogResponse)
	err := c.cc.Invoke(ctx, "/protobuf.MygrpcService/DeleteLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MygrpcServiceServer is the server API for MygrpcService service.
// All implementations must embed UnimplementedMygrpcServiceServer
// for forward compatibility
type MygrpcServiceServer interface {
	QueryLogIsExist(context.Context, *QueryLogIsExistRequest) (*QueryLogIsExistResponse, error)
	QueryLog(context.Context, *QueryLogRequest) (*QueryLogResponse, error)
	DeleteLogIsExist(context.Context, *DeleteLogIsExistRequest) (*DeleteLogIsExistResponse, error)
	DeleteLog(context.Context, *DeleteLogRequest) (*DeleteLogResponse, error)
	mustEmbedUnimplementedMygrpcServiceServer()
}

// UnimplementedMygrpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMygrpcServiceServer struct {
}

func (UnimplementedMygrpcServiceServer) QueryLogIsExist(context.Context, *QueryLogIsExistRequest) (*QueryLogIsExistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLogIsExist not implemented")
}
func (UnimplementedMygrpcServiceServer) QueryLog(context.Context, *QueryLogRequest) (*QueryLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLog not implemented")
}
func (UnimplementedMygrpcServiceServer) DeleteLogIsExist(context.Context, *DeleteLogIsExistRequest) (*DeleteLogIsExistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLogIsExist not implemented")
}
func (UnimplementedMygrpcServiceServer) DeleteLog(context.Context, *DeleteLogRequest) (*DeleteLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLog not implemented")
}
func (UnimplementedMygrpcServiceServer) mustEmbedUnimplementedMygrpcServiceServer() {}

// UnsafeMygrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MygrpcServiceServer will
// result in compilation errors.
type UnsafeMygrpcServiceServer interface {
	mustEmbedUnimplementedMygrpcServiceServer()
}

func RegisterMygrpcServiceServer(s grpc.ServiceRegistrar, srv MygrpcServiceServer) {
	s.RegisterService(&MygrpcService_ServiceDesc, srv)
}

func _MygrpcService_QueryLogIsExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLogIsExistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MygrpcServiceServer).QueryLogIsExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.MygrpcService/QueryLogIsExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MygrpcServiceServer).QueryLogIsExist(ctx, req.(*QueryLogIsExistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MygrpcService_QueryLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MygrpcServiceServer).QueryLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.MygrpcService/QueryLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MygrpcServiceServer).QueryLog(ctx, req.(*QueryLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MygrpcService_DeleteLogIsExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLogIsExistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MygrpcServiceServer).DeleteLogIsExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.MygrpcService/DeleteLogIsExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MygrpcServiceServer).DeleteLogIsExist(ctx, req.(*DeleteLogIsExistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MygrpcService_DeleteLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MygrpcServiceServer).DeleteLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.MygrpcService/DeleteLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MygrpcServiceServer).DeleteLog(ctx, req.(*DeleteLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MygrpcService_ServiceDesc is the grpc.ServiceDesc for MygrpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MygrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.MygrpcService",
	HandlerType: (*MygrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryLogIsExist",
			Handler:    _MygrpcService_QueryLogIsExist_Handler,
		},
		{
			MethodName: "QueryLog",
			Handler:    _MygrpcService_QueryLog_Handler,
		},
		{
			MethodName: "DeleteLogIsExist",
			Handler:    _MygrpcService_DeleteLogIsExist_Handler,
		},
		{
			MethodName: "DeleteLog",
			Handler:    _MygrpcService_DeleteLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mygrpc/go.proto",
}
